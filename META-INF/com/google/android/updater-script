#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ui_print(">>> ArchiDroid is now loading...");

assert(getprop("ro.product.device") == "mako" ||
		getprop("ro.build.product") == "mako" ||
		abort("This package is for \"mako\" devices; this is a \"" + getprop("ro.product.device") + "\"."););

ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Ready!");
set_progress(0.01);


################
### RECOVERY ###
################

### TWRP ###
if file_getprop("/tmp/aroma-data/archidroidrecovery.prop","recovery") == "twrp" then
	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing TWRP Recovery");
	package_extract_file("_archidroid/recoveries/twrp/recovery.img", file_getprop("/tmp/aroma-data/device.prop","recovery"));
endif;

if file_getprop("/tmp/aroma-data/archidroidrecovery.prop","recovery") == "none" then
	if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") != "yes" then
		package_extract_file("system/bin/otasigcheck.sh", "/tmp/otasigcheck.sh");
		package_extract_file("META-INF/org/cyanogenmod/releasekey", "/tmp/releasekey");
		set_metadata("/tmp/otasigcheck.sh", "uid", 0, "gid", 0, "mode", 0755);
		run_program("/tmp/otasigcheck.sh");
		sha1_check(read_file("/tmp/releasekey"),"7241e92725436afc79389d4fc2333a2aa8c20230") && abort("Can't install this package on top of incompatible data. Please try another package or run a factory reset");
	endif;

	### ARCHIDROID TOOLS ###
	package_extract_file("_archidroid/exec/adlock.sh", "/tmp/adlock.sh");
	set_perm(0, 0, 0755, "/tmp/adlock.sh");

	set_progress(0.02);

	if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "no" && file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") != "barebones" then
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Backing up all addons");
		package_extract_file("system/bin/backuptool.sh", "/tmp/backuptool.sh");
		package_extract_file("system/bin/backuptool.functions", "/tmp/backuptool.functions");
		set_metadata("/tmp/backuptool.sh", "uid", 0, "gid", 0, "mode", 0755);
		set_metadata("/tmp/backuptool.functions", "uid", 0, "gid", 0, "mode", 0644);
		run_program("/tmp/backuptool.sh", "backup");
	endif;

	set_progress(0.03);

	### UNLOCK ###
	run_program("/tmp/adlock.sh", "unlock", "/system/etc/hosts");

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Formatting Partitions");
	delete_recursive("/system");

	set_progress(0.07);

	if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "yes" then
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Formatting /data excluding /data/media");
		package_extract_file("_archidroid/exec/wipe.sh", "/tmp/wipe.sh");
		set_perm(0, 0, 0755, "/tmp/wipe.sh");
		run_program("/tmp/wipe.sh");
		delete("/tmp/wipe.sh");
	endif;

	set_progress(0.08);

	if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "no" then
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Cleaning cache, dalvik cache and resource cache");
		delete_recursive("/data/dalvik-cache");
		delete_recursive("/dalvik/dalvik-cache");
		delete_recursive("/data/resource-cache");
	endif;

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Executing Archi's Scripts");
	package_extract_file("_archidroid/exec/archidroid.sh", "/tmp/archidroid.sh");
	set_perm(0, 0, 0755, "/tmp/archidroid.sh");

	if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "yes" then
		ui_print("<b><#ff0000>RunOnce</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>$</#></b> Install Mode Detected");
		run_program("/tmp/archidroid.sh", "INSTALL");
	else
		if file_getprop("/tmp/aroma-data/archidroidwipe.prop","force") == "no" then
			ui_print("<b><#ff0000>RunOnce</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>$</#></b> Update Mode Detected");
			run_program("/tmp/archidroid.sh", "UPDATE");
		else
			ui_print("<b><#ff0000>RunOnce</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>$</#></b> Forced Update Mode Detected");
			run_program("/tmp/archidroid.sh", "UPDATE", "FORCE");
		endif;
	endif;

	delete("/tmp/archidroid.sh");

	set_progress(0.1);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing ArchiDroid Core");
	show_progress(0.4, 1500);
	package_extract_dir("recovery", "/system");
	package_extract_dir("system", "/system");
	delete("/system/bin/otasigcheck.sh");
	set_progress(0.51);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Creating symlinks");
	symlink("../bin/fsck.f2fs", "/system/bin/dump.f2fs");
	symlink("../xbin/su", "/system/bin/su");
	symlink("/data/misc/audio/mbhc.bin", "/system/etc/firmware/wcd9310/wcd9310_mbhc.bin");
	symlink("/data/misc/audio/wcd9310_anc.bin", "/system/etc/firmware/wcd9310/wcd9310_anc.bin");
	symlink("/data/misc/wifi/WCNSS_qcom_cfg.ini", "/system/vendor/firmware/wlan/prima/WCNSS_qcom_cfg.ini");
	symlink("/data/misc/wifi/WCNSS_qcom_wlan_nv.bin", "/system/vendor/firmware/wlan/prima/WCNSS_qcom_wlan_nv.bin");
	symlink("Roboto-Bold.ttf", "/system/fonts/DroidSans-Bold.ttf");
	symlink("Roboto-Regular.ttf", "/system/fonts/DroidSans.ttf");
	symlink("busybox", "/system/xbin/[", "/system/xbin/[[",
			"/system/xbin/adjtimex", "/system/xbin/arp", "/system/xbin/ash",
			"/system/xbin/awk", "/system/xbin/base64", "/system/xbin/basename",
			"/system/xbin/bbconfig", "/system/xbin/blkid", "/system/xbin/blockdev",
			"/system/xbin/brctl", "/system/xbin/bunzip2", "/system/xbin/bzcat",
			"/system/xbin/bzip2", "/system/xbin/cal", "/system/xbin/cat",
			"/system/xbin/catv", "/system/xbin/chattr", "/system/xbin/chcon",
			"/system/xbin/chgrp", "/system/xbin/chmod", "/system/xbin/chown",
			"/system/xbin/chroot", "/system/xbin/chvt", "/system/xbin/clear",
			"/system/xbin/cmp", "/system/xbin/comm", "/system/xbin/cp",
			"/system/xbin/cpio", "/system/xbin/crond", "/system/xbin/crontab",
			"/system/xbin/cut", "/system/xbin/date", "/system/xbin/dc",
			"/system/xbin/dd", "/system/xbin/deallocvt", "/system/xbin/depmod",
			"/system/xbin/devmem", "/system/xbin/df", "/system/xbin/diff",
			"/system/xbin/dirname", "/system/xbin/dmesg", "/system/xbin/dnsd",
			"/system/xbin/dos2unix", "/system/xbin/du", "/system/xbin/echo",
			"/system/xbin/ed", "/system/xbin/egrep", "/system/xbin/env",
			"/system/xbin/expand", "/system/xbin/expr", "/system/xbin/false",
			"/system/xbin/fbsplash", "/system/xbin/fdisk", "/system/xbin/fgconsole",
			"/system/xbin/fgrep", "/system/xbin/find", "/system/xbin/findfs",
			"/system/xbin/flash_lock", "/system/xbin/flash_unlock",
			"/system/xbin/flashcp", "/system/xbin/flock", "/system/xbin/fold",
			"/system/xbin/free", "/system/xbin/freeramdisk", "/system/xbin/fstrim",
			"/system/xbin/fsync", "/system/xbin/ftpget", "/system/xbin/ftpput",
			"/system/xbin/fuser", "/system/xbin/getenforce", "/system/xbin/getopt",
			"/system/xbin/getsebool", "/system/xbin/grep", "/system/xbin/groups",
			"/system/xbin/gunzip", "/system/xbin/gzip", "/system/xbin/halt",
			"/system/xbin/head", "/system/xbin/hexdump", "/system/xbin/hwclock",
			"/system/xbin/id", "/system/xbin/ifconfig", "/system/xbin/inetd",
			"/system/xbin/insmod", "/system/xbin/install", "/system/xbin/ionice",
			"/system/xbin/iostat", "/system/xbin/ip", "/system/xbin/kill",
			"/system/xbin/killall", "/system/xbin/killall5", "/system/xbin/less",
			"/system/xbin/ln", "/system/xbin/losetup", "/system/xbin/ls",
			"/system/xbin/lsattr", "/system/xbin/lsmod", "/system/xbin/lspci",
			"/system/xbin/lsusb", "/system/xbin/lzcat", "/system/xbin/lzma",
			"/system/xbin/lzop", "/system/xbin/lzopcat", "/system/xbin/man",
			"/system/xbin/matchpathcon", "/system/xbin/md5sum", "/system/xbin/mesg",
			"/system/xbin/mkdir", "/system/xbin/mke2fs", "/system/xbin/mkfifo",
			"/system/xbin/mkfs.ext2", "/system/xbin/mkfs.vfat",
			"/system/xbin/mknod", "/system/xbin/mkswap", "/system/xbin/mktemp",
			"/system/xbin/modinfo", "/system/xbin/modprobe", "/system/xbin/more",
			"/system/xbin/mount", "/system/xbin/mountpoint", "/system/xbin/mpstat",
			"/system/xbin/mv", "/system/xbin/nanddump", "/system/xbin/nandwrite",
			"/system/xbin/nbd-client", "/system/xbin/netstat", "/system/xbin/nice",
			"/system/xbin/nmeter", "/system/xbin/nohup", "/system/xbin/nslookup",
			"/system/xbin/ntpd", "/system/xbin/od", "/system/xbin/openvt",
			"/system/xbin/patch", "/system/xbin/pgrep", "/system/xbin/pidof",
			"/system/xbin/ping", "/system/xbin/pipe_progress", "/system/xbin/pkill",
			"/system/xbin/pmap", "/system/xbin/poweroff", "/system/xbin/printenv",
			"/system/xbin/printf", "/system/xbin/ps", "/system/xbin/pstree",
			"/system/xbin/pwd", "/system/xbin/pwdx", "/system/xbin/rdate",
			"/system/xbin/rdev", "/system/xbin/readlink", "/system/xbin/realpath",
			"/system/xbin/renice", "/system/xbin/reset", "/system/xbin/resize",
			"/system/xbin/restorecon", "/system/xbin/rev", "/system/xbin/rm",
			"/system/xbin/rmdir", "/system/xbin/rmmod", "/system/xbin/route",
			"/system/xbin/run-parts", "/system/xbin/runcon", "/system/xbin/rx",
			"/system/xbin/sed", "/system/xbin/selinuxenabled", "/system/xbin/seq",
			"/system/xbin/sestatus", "/system/xbin/setconsole",
			"/system/xbin/setenforce", "/system/xbin/setfiles",
			"/system/xbin/setkeycodes", "/system/xbin/setsebool",
			"/system/xbin/setserial", "/system/xbin/setsid", "/system/xbin/sh",
			"/system/xbin/sha1sum", "/system/xbin/sha256sum",
			"/system/xbin/sha3sum", "/system/xbin/sha512sum", "/system/xbin/sleep",
			"/system/xbin/smemcap", "/system/xbin/sort", "/system/xbin/split",
			"/system/xbin/stat", "/system/xbin/strings", "/system/xbin/stty",
			"/system/xbin/sum", "/system/xbin/swapoff", "/system/xbin/swapon",
			"/system/xbin/sync", "/system/xbin/sysctl", "/system/xbin/tac",
			"/system/xbin/tail", "/system/xbin/tar", "/system/xbin/taskset",
			"/system/xbin/tee", "/system/xbin/telnet", "/system/xbin/telnetd",
			"/system/xbin/test", "/system/xbin/tftp", "/system/xbin/tftpd",
			"/system/xbin/time", "/system/xbin/timeout", "/system/xbin/top",
			"/system/xbin/touch", "/system/xbin/tr", "/system/xbin/traceroute",
			"/system/xbin/true", "/system/xbin/ttysize", "/system/xbin/tune2fs",
			"/system/xbin/umount", "/system/xbin/uname", "/system/xbin/uncompress",
			"/system/xbin/unexpand", "/system/xbin/uniq", "/system/xbin/unix2dos",
			"/system/xbin/unlzma", "/system/xbin/unlzop", "/system/xbin/unxz",
			"/system/xbin/unzip", "/system/xbin/uptime", "/system/xbin/usleep",
			"/system/xbin/uudecode", "/system/xbin/uuencode", "/system/xbin/vi",
			"/system/xbin/watch", "/system/xbin/wc", "/system/xbin/wget",
			"/system/xbin/which", "/system/xbin/whoami", "/system/xbin/xargs",
			"/system/xbin/xz", "/system/xbin/xzcat", "/system/xbin/yes",
			"/system/xbin/zcat");
	symlink("libGLESv2.so", "/system/lib/libGLESv3.so");
	symlink("logcat", "/system/bin/lolcat");
	symlink("mksh", "/system/bin/sh");
	symlink("mount.exfat", "/system/bin/fsck.exfat",
			"/system/bin/mkfs.exfat");
	symlink("pigz", "/system/xbin/unpigz");
	symlink("toolbox", "/system/bin/cat", "/system/bin/chcon",
			"/system/bin/chmod", "/system/bin/chown", "/system/bin/clear",
			"/system/bin/cmp", "/system/bin/cp", "/system/bin/date",
			"/system/bin/dd", "/system/bin/df", "/system/bin/dmesg",
			"/system/bin/du", "/system/bin/getenforce", "/system/bin/getevent",
			"/system/bin/getprop", "/system/bin/getsebool", "/system/bin/grep",
			"/system/bin/hd", "/system/bin/id", "/system/bin/ifconfig",
			"/system/bin/iftop", "/system/bin/insmod", "/system/bin/ioctl",
			"/system/bin/ionice", "/system/bin/kill", "/system/bin/ln",
			"/system/bin/load_policy", "/system/bin/log", "/system/bin/ls",
			"/system/bin/lsmod", "/system/bin/lsof", "/system/bin/md5",
			"/system/bin/mkdir", "/system/bin/mkswap", "/system/bin/mount",
			"/system/bin/mv", "/system/bin/nandread", "/system/bin/netstat",
			"/system/bin/newfs_msdos", "/system/bin/notify", "/system/bin/printenv",
        "/system/bin/ps", "/system/bin/r", "/system/bin/readlink",
        "/system/bin/renice", "/system/bin/restart", "/system/bin/restorecon",
        "/system/bin/rm", "/system/bin/rmdir", "/system/bin/rmmod",
        "/system/bin/route", "/system/bin/runcon", "/system/bin/schedtop",
        "/system/bin/sendevent", "/system/bin/setconsole",
        "/system/bin/setenforce", "/system/bin/setfattr", "/system/bin/setprop",
        "/system/bin/setsebool", "/system/bin/sleep", "/system/bin/smd",
        "/system/bin/start", "/system/bin/stop", "/system/bin/swapoff",
        "/system/bin/swapon", "/system/bin/sync", "/system/bin/top",
        "/system/bin/touch", "/system/bin/umount", "/system/bin/uptime",
        "/system/bin/vmstat", "/system/bin/watchprops",
        "/system/bin/wipe");

	set_progress(0.52);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing ArchiDroid Backend");
	### IMPORTANT ###
	package_extract_dir("_archidroid/auto", "/");
	package_extract_file("_archidroid/exec/archidroid_backend.sh", "/tmp/archidroid_backend.sh");
	set_perm(0, 0, 0755, "/tmp/archidroid_backend.sh");
	run_program("/tmp/archidroid_backend.sh", file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset"));
	delete("/tmp/archidroid_backend.sh");
	### IMPORTANT ###

	set_progress(0.53);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Setting Permissions");
	set_metadata_recursive("/system", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/addon.d", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/bin", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/bin/app_process", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:zygote_exec:s0");
	set_metadata("/system/bin/bdAddrLoader", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:hci_exec:s0");
	set_metadata("/system/bin/clatd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:clatd_exec:s0");
	set_metadata("/system/bin/debuggerd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:debuggerd_exec:s0");
	set_metadata("/system/bin/dhcpcd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dhcp_exec:s0");
	set_metadata("/system/bin/dnsmasq", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dnsmasq_exec:s0");
	set_metadata("/system/bin/drmserver", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:drmserver_exec:s0");
	set_metadata("/system/bin/efsks", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:kickstart_exec:s0");
	set_metadata("/system/bin/hci_qcomm_init", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:hci_exec:s0");
	set_metadata("/system/bin/hostapd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:hostapd_exec:s0");
	set_metadata("/system/bin/installd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:installd_exec:s0");
	set_metadata("/system/bin/keystore", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:keystore_exec:s0");
	set_metadata("/system/bin/ks", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:kickstart_exec:s0");
	set_metadata("/system/bin/mediaserver", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:mediaserver_exec:s0");
	set_metadata("/system/bin/mksh", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:shell_exec:s0");
	set_metadata("/system/bin/mtpd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:mtp_exec:s0");
	set_metadata("/system/bin/netcfg", "uid", 0, "gid", 3003, "mode", 02750, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/bin/netd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:netd_exec:s0");
	set_metadata("/system/bin/ping", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:ping_exec:s0");
	set_metadata("/system/bin/pppd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:ppp_exec:s0");
	set_metadata("/system/bin/qcks", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:kickstart_exec:s0");
	set_metadata("/system/bin/racoon", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:racoon_exec:s0");
	set_metadata("/system/bin/rild", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:rild_exec:s0");
	set_metadata("/system/bin/run-as", "uid", 0, "gid", 2000, "mode", 0750, "capabilities", 0xc0, "selabel", "u:object_r:runas_exec:s0");
	set_metadata("/system/bin/sdcard", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:sdcardd_exec:s0");
	set_metadata("/system/bin/servicemanager", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:servicemanager_exec:s0");
	set_metadata("/system/bin/surfaceflinger", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:surfaceflinger_exec:s0");
	set_metadata("/system/bin/vold", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:vold_exec:s0");
	set_metadata("/system/bin/wpa_supplicant", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:wpa_exec:s0");
	set_metadata_recursive("/system/etc/dhcpcd", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:dhcp_system_file:s0");
	set_metadata("/system/etc/dhcpcd/dhcpcd-run-hooks", "uid", 1014, "gid", 2000, "mode", 0550, "capabilities", 0x0, "selabel", "u:object_r:dhcp_system_file:s0");
	set_metadata_recursive("/system/etc/init.d", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/init.d", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/install-cm-recovery.sh", "uid", 0, "gid", 0, "mode", 0544, "capabilities", 0x0);
	set_metadata_recursive("/system/etc/ppp", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0555, "capabilities", 0x0, "selabel", "u:object_r:ppp_system_file:s0");
	set_metadata("/system/recovery-from-boot.p", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0);
	set_metadata("/system/vendor", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/etc", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/etc/audio_effects.conf", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/firmware", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/firmware/discretix", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/firmware/keymaster", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/firmware/wlan", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/firmware/wlan/prima/WCNSS_cfg.dat", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/lib", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/lib/drm", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/lib/drm/libdrmwvmplugin.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/lib/mediadrm", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/lib/mediadrm/libwvdrmengine.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/xbin", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/librank", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/procmem", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/procrank", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/su", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:su_exec:s0");

	set_progress(0.54);

	#################
	### BAREBONES ###
	#################
	if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop","preset") == "barebones" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing Stock Kernel");
			package_extract_file("boot.img", file_getprop("/tmp/aroma-data/device.prop","kernel"));
	else
		##############
		### KERNEL ###
		##############

		# We need to make sure that current kernel is CM-based to prevent random zygote kernel panics
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Cleaning Old Kernel");
		package_extract_file("boot.img", file_getprop("/tmp/aroma-data/device.prop","kernel"));

		### STOCK ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","kernel") == "stock" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing Stock Kernel");
			# We already have stock kernel, as we done cleaning
		endif;

		set_progress(0.6);


		###############
		### RESTORE ###
		###############

		if file_getprop("/tmp/aroma-data/archidroidwipe.prop","wipe") == "no" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Restoring Addons");
			package_extract_file("system/bin/backuptool.sh", "/tmp/backuptool.sh");
			package_extract_file("system/bin/backuptool.functions", "/tmp/backuptool.functions");
			set_metadata("/tmp/backuptool.sh", "uid", 0, "gid", 0, "mode", 0755);
			set_metadata("/tmp/backuptool.functions", "uid", 0, "gid", 0, "mode", 0644);
			run_program("/tmp/backuptool.sh", "restore");
			delete("/system/bin/backuptool.sh");
			delete("/system/bin/backuptool.functions");
		endif;

		set_progress(0.63);


		############
		### ROOT ###
		############

		### CHAINFIRE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","superuser") == "chainfire" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing SuperSU by Chainfire");
			package_extract_dir("_archidroid/root/chainfire/system", "/system");
			symlink("/system/xbin/su", "/system/bin/su");
			symlink("/system/etc/install-recovery.sh", "/system/bin/install-recovery.sh");
			set_metadata("/system/etc/install-recovery.sh", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/etc/init.d/99SuperSUDaemon", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/xbin/su", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");

			# SuperSU requires some additional work
			package_extract_file("_archidroid/root/chainfire/chainfire.sh", "/tmp/chainfire.sh");
			set_perm(0, 0, 0755, "/tmp/chainfire.sh");
			run_program("/tmp/chainfire.sh");
			delete("/tmp/chainfire.sh");

			# Apply permissions
			set_metadata("/system/xbin/sugote", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:zygote_exec:s0");
			set_metadata("/system/xbin/sugote-mksh", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/bin/.ext", "uid", 0, "gid", 0, "mode", 0777, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			run_program("/system/xbin/su", "--install");
		endif;

		### KOUSH ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","superuser") == "koush" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Superuser by Koush");
			# This is already default in AOSP
		endif;

		### NONE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","superuser") == "none" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Disabling root access");
			package_extract_file("_archidroid/root/none/disableroot.sh", "/tmp/disableroot.sh");
			set_perm(0, 0, 0755, "/tmp/disableroot.sh");
			run_program("/tmp/disableroot.sh");
			delete("/tmp/disableroot.sh");
		endif;


		###########
		### DPI ###
		###########

		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ", file_getprop("/tmp/aroma-data/archidroid.prop","dpi"), " DPI");
		package_extract_file("_archidroid/exec/dpi.sh", "/tmp/dpi.sh");
		set_perm(0, 0, 0755, "/tmp/dpi.sh");
		run_program("/tmp/dpi.sh", file_getprop("/tmp/aroma-data/archidroid.prop","dpi"));
		delete("tmp/dpi.sh");

		set_progress(0.64);


		#############
		### GAPPS ###
		#############

		if file_getprop("/tmp/aroma-data/archidroid.prop","gapps") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Apps");
			delete("/system/app/Calendar.apk", "/system/app/Calendar.odex", "/system/app/QuickSearchBox.apk", "/system/app/QuickSearchBox.odex");
			show_progress(0.1, 80);
			package_extract_dir("_archidroid/gapps/pa", "/");
			package_extract_dir("_archidroid/gapps/archidroid", "/");
		endif;

		set_progress(0.80);


		##############
		### XPOSED ###
		##############

		if file_getprop("/tmp/aroma-data/archidroid.prop","xposed") == "1" then

			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including Xposed Framework");
			run_program("/sbin/busybox","mv","-f","/system/bin/app_process","/system/bin/app_process.orig");
			package_extract_dir("_archidroid/apps/xposed/xposed", "/");
			set_metadata("/system/bin/app_process", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");

			# Xposed modules bundled with Xposed
			package_extract_dir("_archidroid/apps/xposed/appsettings", "/");
			package_extract_dir("_archidroid/apps/xposed/playstorefix", "/");

			# Optional modules
			if file_getprop("/tmp/aroma-data/archidroidxposed.prop","gravitybox") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including GravityBox Xposed Module");
				package_extract_dir("_archidroid/apps/xposed/gravitybox", "/");
			endif;
			if file_getprop("/tmp/aroma-data/archidroidxposed.prop","xprivacy") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including XPrivacy Xposed Module");
				package_extract_dir("_archidroid/apps/xposed/xprivacy", "/");
			endif;

		endif;

		set_progress(0.82);


		################
		### KEYBOARD ###
		################

		### GOOGLE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","kgoogle") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Keyboard");
			package_extract_dir("_archidroid/apps/google/keyboard", "/");
		endif;

		### STOCK ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","kstock") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Stock Keyboard");
		else
			delete("/system/app/LatinIME.apk", "/system/app/LatinIME.odex");
		endif;

		set_progress(0.84);


		################
		### LAUNCHER ###
		################

		### NOVA ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","lnova") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Nova Launcher");
			package_extract_dir("_archidroid/apps/nova", "/");
		endif;

		### GOOGLE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","lgoogle") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Launcher");
			package_extract_dir("_archidroid/apps/google/launcher", "/");
		endif;

		### STOCK ###
		if file_getprop("/tmp/aroma-data/archidroid.prop","lstock") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Stock Launcher");
		else
			delete("/system/priv-app/CMHome.apk", "/system/priv-app/CMHome.odex", "/system/priv-app/Launcher3.apk", "/system/priv-app/Launcher3.odex", "/system/priv-app/Trebuchet.apk", "/system/priv-app/Trebuchet.odex");
		endif;

		set_progress(0.85);


		#####################
		### BOOTANIMATION ###
		#####################

		if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "archi3" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid 3.X Bootanimation");
			package_extract_dir("_archidroid/bootanimations/archi3", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "archi2" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid 2.X Bootanimation");
			package_extract_dir("_archidroid/bootanimations/archi2", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "archi1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid 1.X Bootanimation");
			package_extract_dir("_archidroid/bootanimations/archi1", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "stock" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying Stock Bootanimation");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","bootanimation") == "none" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Disabling Bootanimation");
			package_extract_file("_archidroid/bootanimations/none/disablebootanim.sh", "/tmp/disablebootanim.sh");
			set_perm(0, 0, 0755, "/tmp/disablebootanim.sh");
			run_program("/tmp/disablebootanim.sh");
			delete("/tmp/disablebootanim.sh");
			delete("/system/media/bootanimation.zip");
		endif;

		set_progress(0.86);


		##############
		### TWEAKS ###
		##############

		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid build.prop tweaks");
		package_extract_file("_archidroid/tweaks/build.prop/tweaks.sh", "/tmp/tweaks.sh");
		set_perm(0, 0, 0755, "/tmp/tweaks.sh");
		run_program("/tmp/tweaks.sh");
		delete("/tmp/tweaks.sh");

		if file_getprop("/tmp/aroma-data/archidroid.prop","navibar") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including Navigation Bar");
			package_extract_file("_archidroid/tweaks/build.prop/navibarON.sh", "/tmp/navibarON.sh");
			set_perm(0, 0, 0755, "/tmp/navibarON.sh");
			run_program("/tmp/navibarON.sh");
			delete("/tmp/navibarON.sh");
		else
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Excluding Navigation Bar");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","cell") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including Cell Broadcasts");
		else
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Excluding Cell Broadcasts");
			delete("/system/app/CellBroadcastReceiver.apk", "/system/app/CellBroadcastReceiver.odex");
		endif;

		set_progress(0.87);


		############
		### APPS ###
		############

		if file_getprop("/tmp/aroma-data/archidroid.prop","titaniumbackup") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Titanium Backup");
			package_extract_dir("_archidroid/apps/titaniumbackup", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","greenify") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Greenify");
			package_extract_dir("_archidroid/apps/greenify", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","lmt") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing LMT");
			package_extract_dir("_archidroid/apps/lmt", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","mxplayer") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing MXPlayer");
			package_extract_dir("_archidroid/apps/mxplayer", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","cooltool") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing CoolTool");
			package_extract_dir("_archidroid/apps/cooltool", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop","rootbrowser") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Root Browser");
			package_extract_dir("_archidroid/apps/rootbrowser", "/");
		endif;

		set_progress(0.90);


		# One more fix to logcat
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Syncing System");
		#set_perm(1000, 1000, 0771, "/data");
		#set_perm_recursive(1000, 1000, 0771, 0644, "/data/app");
		#set_perm_recursive(0, 0, 0771, 0660, "/data/data");
		run_program("/sbin/sync");
		set_progress(0.97);

		### LOCK ###
		run_program("/tmp/adlock.sh", "lock", "/system/etc/hosts");
	endif;
	set_progress(0.98);
endif;

run_program("/sbin/sync");

set_progress(0.99);

ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Unmounting partitions");

ui_print("===================================");
ui_print("  ArchiDroid Flashed Successfully  ");
ui_print("Please share your experience on XDA");
ui_print("===================================");
set_progress(1.0);
